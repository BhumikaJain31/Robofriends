{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchField.js","components/Scroll.js","components/Footer.js","container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","username","id","className","src","alt","CardList","robots","map","user","i","SearchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","year","Date","getUTCFullYear","Footer","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCASC,EAdF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAOC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,GACpC,OACI,sBAAKC,UAAW,iDAAhB,UACA,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAK,UAE9D,gCACA,6BAAKN,IACL,uCAAUE,KACV,4BAAID,WCWOM,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,8BACIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEAR,GAAKK,EAAOG,GAAGR,GACfH,KAAOQ,EAAOG,GAAGX,KACjBE,SAAWM,EAAOG,GAAGT,SACrBD,MAAQO,EAAOG,GAAGV,OAJZO,EAAOG,UCClBC,EARK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACtB,OACQ,8BACI,uBAAOT,UAAU,8CAA8CU,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCKhHI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,SAAxE,SACKJ,EAAMK,YCJbC,GAAO,IAAIC,MAAOC,iBAYTC,EAVA,WACb,OACE,8BACE,oBAAGvB,UAAU,KAAb,uBACaoB,EADb,KANO,qBCoDEI,E,kDA5CX,aAAc,IAAD,8BACT,gBAeJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAf1C,EAAKC,MAAQ,CACT3B,OAAQ,GACRwB,YAAa,IAJR,E,gEAQO,IAAD,OACfI,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAAEvB,OAAQgC,S,+BAOvB,IAAD,EAC0BC,KAAKN,MAA5BH,EADH,EACGA,YAAaxB,EADhB,EACgBA,OACdkC,EAAelC,EAAOmC,QAAO,SAAAC,GAC/B,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASd,EAAYa,kBAGzD,OAAqB,IAAlBrC,EAAOuC,OACC,oBAAI3C,UAAW,KAAf,wBAKP,sBAAKA,UAAY,KAAjB,UACI,oBAAIA,UAAY,cAAhB,yBACA,cAAC,EAAD,CAAaS,aAAgB4B,KAAKZ,iBAClC,cAAC,EAAD,UACA,cAAC,EAAD,CAAUrB,OAAUkC,MAEpB,cAAC,EAAD,W,GAtCEM,aCAlBC,IAASC,OACN,cAAC,EAAD,IACDC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.08668479.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//jshint esversion:6\r\n\r\nimport React from 'react';\r\n\r\nconst Card = ( {name , email, username, id}) => {\r\n    return (\r\n        <div className= 'br4 bg-light-blue dib pa4 ma2 shadow-5 grow tc'>\r\n        <img src={`https://robohash.org/${id}?size=200x200`} alt= 'Robos' />\r\n\r\n    <div>\r\n    <h2>{name}</h2>\r\n    <p>User: {username}</p>\r\n    <p>{email}</p>\r\n    </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","//jshint esversion:6\r\n\r\nimport React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div>{\r\n            robots.map((user, i) => {\r\n                return(\r\n                    <Card\r\n                    key= {robots[i]}\r\n                    id= {robots[i].id}\r\n                    name= {robots[i].name}\r\n                    username= {robots[i].username}\r\n                    email= {robots[i].email}/>\r\n                );\r\n            })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","//jshint esversion:6\r\n\r\nimport React from 'react';\r\n\r\nconst SearchField = ({searchChange}) => {\r\nreturn(\r\n        <div>\r\n            <input className='pa3 ma2 br4 tc ba f3 b--green bg-light-blue' type='search' placeholder='Search Robots' onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchField;\r\n","//jshint esversion:6\r\n\r\nimport React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style= {{overflowY: 'scroll', border: '5px solid #8b008b', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst name = \"Bhumika Jain\";\r\nconst year = new Date().getUTCFullYear();\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div>\r\n      <p className=\"f4\">\r\n        Copyright {year} @{name}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","//jshint esversion:6\r\n\r\nimport React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchField from '../components/SearchField';\r\nimport Scroll from '../components/Scroll';\r\nimport Footer from '../components/Footer';\r\n// import { robots } from './robots';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n            return response.json();\r\n        }).then(users => {\r\n            this.setState({ robots: users })\r\n        })\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n    }\r\n    render(){\r\n        const {searchfield, robots} = this.state;\r\n        const filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n\r\n        if(robots.length === 0){\r\n            return <h1 className= 'tc'>Loading...</h1>\r\n        }\r\n        else {\r\n\r\n        return (\r\n            <div className = 'tc'>\r\n                <h1 className = 'f1 lh-title'>RoboFriends</h1>\r\n                <SearchField searchChange = {this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots = {filterRobots}/>\r\n                </Scroll>\r\n                <Footer />\r\n            </div>\r\n        );\r\n      }\r\n    }\r\n    }\r\n\r\nexport default App;\r\n","//jshint esversion:6\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './container/App';\r\n\r\nReactDOM.render(\r\n   <App /> ,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}